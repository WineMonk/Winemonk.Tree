<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Winemonk.Tree</name>
    </assembly>
    <members>
        <member name="T:Winemonk.Tree.ITreeExtension">
            <summary>
                树扩展 - Tree Extension
            </summary>
        </member>
        <member name="M:Winemonk.Tree.ITreeExtension.Filter``1(Winemonk.Tree.ITree{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
                过滤树 - Filter Tree
            </summary>
            <typeparam name="TTreeNode">树类型 - Tree type</typeparam>
            <param name="tree">树实例 - Tree instance</param>
            <param name="expression">过滤验证表达式 - Filter validation expressions</param>
            <param name="isClone">过滤结果是否以新生成的拷贝对象返回 - Is the filtering result returned as a newly generated copy object</param>
            <returns>
                过滤后的树实例。 - Filtered tree instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">参数为空异常 - Parameter null exception</exception>
            <exception cref="T:System.NotSupportedException">树类型不支持此方法异常 - Tree type does not support this method exception</exception>
            <exception cref="T:System.InvalidOperationException">克隆失败异常 - Clone failed exception</exception>
        </member>
        <member name="M:Winemonk.Tree.ITreeExtension.Traversal``1(Winemonk.Tree.ITree{``0},System.Action{``0})">
            <summary>
                遍历树 - Traverse the tree
            </summary>
            <typeparam name="TTreeNode">树类型 - Tree type</typeparam>
            <param name="tree">树实例 - Tree instance</param>
            <param name="expression">遍历表达式 - Traverse expression</param>
            <exception cref="T:System.ArgumentNullException">参数为空异常 - Parameter null exception</exception>
            <exception cref="T:System.NotSupportedException">树类型不支持此方法异常 - Tree type does not support this method exception</exception>
        </member>
        <member name="M:Winemonk.Tree.ITreeExtension.Filter``2(Winemonk.Tree.ITree{``0,``1},System.Func{``1,System.Boolean},System.Boolean)">
            <summary>
                过滤树 - Filter Tree
            </summary>
            <typeparam name="TKey">键类型 - Key type</typeparam>
            <typeparam name="TTreeNode">树类型 - Tree type</typeparam>
            <param name="tree">树实例 - Tree instance</param>
            <param name="expression">过滤验证表达式 - Filter validation expressions</param>
            <param name="isClone">过滤结果是否以新生成的拷贝对象返回 - Is the filtering result returned as a newly generated copy object</param>
            <returns>
                过滤后的树实例。 - Filtered tree instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">参数为空异常 - Parameter null exception</exception>
            <exception cref="T:System.NotSupportedException">树类型不支持此方法异常 - Tree type does not support this method exception</exception>
            <exception cref="T:System.InvalidOperationException">克隆失败异常 - Clone failed exception</exception>
        </member>
        <member name="M:Winemonk.Tree.ITreeExtension.Traversal``2(Winemonk.Tree.ITree{``0,``1},System.Action{``1})">
            <summary>
                遍历树 - Traverse the tree
            </summary>
            <typeparam name="TKey">键类型 - Key type</typeparam>
            <typeparam name="TTreeNode">树类型 - Tree type</typeparam>
            <param name="tree">树实例 - Tree instance</param>
            <param name="expression">遍历表达式 - Traverse expression</param>
            <exception cref="T:System.ArgumentNullException">参数为空异常 - Parameter null exception</exception>
            <exception cref="T:System.NotSupportedException">树类型不支持此方法异常 - Tree type does not support this method exception</exception>
        </member>
        <member name="T:Winemonk.Tree.ITree`1">
            <summary>
                树接口 - Tree interface
            </summary>
            <typeparam name="TTreeNode">
                节点类型 - Node type
            </typeparam>
        </member>
        <member name="P:Winemonk.Tree.ITree`1.Parent">
            <summary>
                父节点 - Parent Node
            </summary>
            <remarks>
                序列化时需要忽略此属性！- This attribute needs to be ignored during serialization!
            </remarks>
        </member>
        <member name="P:Winemonk.Tree.ITree`1.Children">
            <summary>
                子节点 - Child nodes
            </summary>
        </member>
        <member name="M:Winemonk.Tree.ITree`1.Clone">
            <summary>
                克隆 - Clone
            </summary>
            <returns>
                克隆实例。 - Cloned instance.
            </returns>
        </member>
        <member name="T:Winemonk.Tree.ITree`2">
            <summary>
                拥有键的树接口 - Tree interface with keys
            </summary>
            <typeparam name="TKey">键类型 - Key type</typeparam>
            <typeparam name="TTreeNode">节点类型 - Node type</typeparam>
        </member>
        <member name="P:Winemonk.Tree.ITree`2.Key">
            <summary>
                键 - Key
            </summary>
        </member>
        <member name="P:Winemonk.Tree.ITree`2.PKey">
            <summary>
                父节点键 - Parent node key
            </summary>
        </member>
        <member name="P:Winemonk.Tree.ITree`2.Parent">
            <summary>
                父节点 - Parent Node
            </summary>
            <remarks>
                序列化时需要忽略此属性！ - This attribute needs to be ignored during serialization!
            </remarks>
        </member>
        <member name="P:Winemonk.Tree.ITree`2.Children">
            <summary>
                子节点 - Child nodes
            </summary>
        </member>
        <member name="P:Winemonk.Tree.ITree`2.Item(`0)">
            <summary>
                子节点索引器 - Child node indexer
            </summary>
            <param name="key">键 - Key</param>
            <returns>
                对应子节点。 - Corresponding child nodes.
            </returns>
        </member>
        <member name="M:Winemonk.Tree.ITree`2.Clone">
            <summary>
                克隆 - Clone
            </summary>
            <returns>
                克隆实例。 - Clone instance.
            </returns>
        </member>
    </members>
</doc>
